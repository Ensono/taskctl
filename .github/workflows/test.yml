name: Test
on: 
  pull_request:
    branches: 
      - main
      - master
  push:
    branches:
      - main
      - master

permissions:
  contents: write
  statuses: write
  checks: write
  pull-requests: write

jobs:
  build:
    name: Test
    runs-on: ubuntu-latest
    # container:
    #   image: golang:1.23-bullseye
    env:
      TASKCTL_CONFIG_FILE: tasks.yaml

    steps:
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.23.x

    - name: Check out code into the Go module directory
      uses: actions/checkout@v4

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: check schema
      run: CI=true go run cmd/main.go generateschema

    - name: go vet
      run: |
        go run cmd/main.go run task govet
    
    - name: Test
      run: |
        go run cmd/main.go run pipeline test:unit
        # mkdir -p .coverage
        # go test ./... -v -race -mod=readonly
    
    - name: Publish Junit style Test Report
      uses: mikepenz/action-junit-report@v3
      if: always() # always run even if the previous step fails
      with:
        report_paths: '.coverage/report-junit.xml'

    - name: Code Coverage Summary Report
      uses: irongut/CodeCoverageSummary@v1.3.0
      if: always()
      with:
        filename: '.coverage/report-cobertura.xml'
        badge: true
        format: markdown
        fail_below_min: true
        output: both
        thresholds: '60 80'

    - name: Add Coverage PR Comment
      uses: marocchino/sticky-pull-request-comment@v2
      if: github.event_name == 'pull_request'
      with:
        recreate: true
        path: code-coverage-results.md
    # TODO: add sonar cloud
