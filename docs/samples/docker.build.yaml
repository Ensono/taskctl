# yaml-language-server: $schema=../../schemas/schema_v1.json

contexts:
  echo:container:
    container:
      name: alpine:latest

  # Example: using podman inside a container to build images
  # 
  podman:container:
    container:
      name: quay.io/podman/stable
      container_args:
        - --cap-add=sys_admin 
        - --cap-add mknod 
        - --device=/dev/fuse 
        - --security-opt seccomp=unconfined 
        - --security-opt label=disable
    env:
      DOCKER_CONFIG: /workspace/.taskctl/.docker
    envfile:
      exclude:
        - HOME

  docker:build:
    container:
      # some container with the executor from kaniko in it
      name: dnitsch/kaniko-test:0.0.3
    env:
      # /workspace/.taskctl is the default path where the current working directory gets mounted to
      # ensure you have a step before that runs relevant credential generation
      # Depending on your use case the auth credentials need to look in a certain way
      # https://github.com/GoogleContainerTools/kaniko?tab=readme-ov-file#pushing-to-different-registries
      # 
      DOCKER_CONFIG: /workspace/.taskctl/.docker

pipelines:
  tag:push:image:
    - task: registry:auth
    - task: build:push:image
      depends_on:
        - registry:auth
  # pipeline:ci:
  #   - task: 
  #   - 

tasks:
  registry:auth:
    context: echo:container
    command:
      - echo "run some stuff to generate an auth file"
      - echo "copying auth file to .docker/config.json"
      - echo "FOO=bar" > .env
    artifacts:
      path: .env
      type: file


  build:push:image:
    description: | 
      Pushes an image to registry
      
      Example: taskctl run build:push:image -c docs/samples/docker.build.yaml
    context: docker:build
    command:
      - executor --context . --dockerfile Dockerfile --destination dnitsch/app-kaniko-test:0.0.7
  
  podman:build:push:
    context: podman:container
    description: |
      builds multi arch images and pushes them to registry

      Example: taskctl run podman:build:push -c docs/samples/docker.build.yaml
    command:
      - |
        podman build --platform=linux/amd64 -f Dockerfile -t dnitsch/app-podman-test:${BUILD_VERSION}-linux-amd64 .
        podman build --platform=linux/arm64 -f Dockerfile -t dnitsch/app-podman-test:${BUILD_VERSION}-linux-arm64 .
        podman manifest create dnitsch/app-podman-test:${BUILD_VERSION} \
          dnitsch/app-podman-test:${BUILD_VERSION}-linux-amd64 \
          dnitsch/app-podman-test:${BUILD_VERSION}-linux-arm64
        podman manifest push dnitsch/app-podman-test:${BUILD_VERSION} docker://dnitsch/app-podman-test:${BUILD_VERSION}
        podman manifest rm dnitsch/app-podman-test:${BUILD_VERSION}
    reset_context: true
    env:
      BUILD_VERSION: 0.0.14
