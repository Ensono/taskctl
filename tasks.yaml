# yaml-language-server: $schema=schemas/schema_v1.json

debug: true
output: cockpit
# TODO: top level variables are not being munged int
variables:
  foo: 1

# variables:
#   RepoOwner: Ensono
#   BinName: taskctl
#   LDFLAGS: -ldflags="-s -w -X \"github.com/{{.RepoOwner}})/{{.BinName}})/cmd/taskctl.Version={{.Version}}\" -X \"github.com/{{.RepoOwner}}/{{.BinName}})/cmd/taskctl.Revision={{.Revision}}\" -extldflags -static"

pipelines:
  fixcs:
    - task: goimports
      dir: "{{.Root}}"
    - task: gofmt
      dir: "{{.Root}}"
      depends_on: goimports

  prepare:
    - task: tidy
    - task: test
    - task: goimports
      depends_on: test
    - task: gofmt
      depends_on: goimports
    - pipeline: lints

  lints:
    - task: golint
    - task: govet
      depends_on: golint
  
  test:unit:
    - task: clean
    - task: test_prereqs
    - task: test
      depends_on: 
        - clean
        - test_prereqs

  build:binary:
    - task: clean
    - task: build
      depends_on:
        - clean
      variables:
        RepoOwner: Ensono
        BinName: taskctl

tasks:
  clean: 
    command: 
      - | 
        rm -rf bin/*
        rm -rf dist/*
        rm -rf vendor/*
  test_prereqs: 
    command: |
        mkdir -p .coverage
        go install github.com/jstemmer/go-junit-report@v0.9.1 && \
        go install github.com/axw/gocov/gocov@v1.0.0 && \
        go install github.com/AlekSi/gocov-xml@v1.0.0

  test:
    command:
      - mkdir -p .coverage
      - go test ./... -v -race -mod=readonly -coverprofile=.coverage/out > .coverage/test.out
      - cat .coverage/test.out | go-junit-report > .coverage/report-junit.xml
      - gocov convert .coverage/out | gocov-xml > .coverage/report-cobertura.xml
      - cat .coverage/test.out

  build:
    command:
      - |
        ldflags="-s -w -X \"github.com/{{.RepoOwner}}/{{.BinName}}/cmd/taskctl.Version={{.Version}}\" -X \"github.com/{{.RepoOwner}}/{{.BinName}}/cmd/taskctl.Revision={{.Revision}}\" -extldflags -static"
        GOOS=${GOOS} GOARCH=${GOARCH} CGO_ENABLED=0 go build -mod=readonly -buildvcs=false -ldflags="$ldflags" -o bin/{{.BinName}}-${GOOS}-${GOARCH}${BINARY_SUFFIX} cmd/main.go
    variations:
      - GOOS: windows
        GOARCH: amd64
        BINARY_SUFFIX: .exe
      - GOOS: windows
        GOARCH: "386"
        BINARY_SUFFIX: .exe
      - GOOS: windows
        GOARCH: arm64
        BINARY_SUFFIX: .exe
      - GOOS: darwin
        GOARCH: amd64
        BINARY_SUFFIX: ""
      - GOOS: darwin
        GOARCH: arm64
        BINARY_SUFFIX: ""
      - GOOS: linux
        GOARCH: arm64
        BINARY_SUFFIX: ""
      - GOOS: linux
        GOARCH: amd64
        BINARY_SUFFIX: ""
    reset_context: true
    variables:
      RepoOwner: Ensono
      BinName: taskctl

  variationsTester:noReset:
    command:
      - echo "VAR1 is $VAR1"
    variations:
      - VAR1: var1
      - VAR1: var2
      - VAR1: var3
      - VAR1: var4

  variationsTester:withReset:
    command:
      - echo "VAR1 is $VAR1"
    variations:
      - VAR1: var11
      - VAR1: var22
      - VAR1: var3
      - VAR1: var4
    reset_context: true

  golint:
  # in CI it is run 
    command:
      - go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
      - golangci-lint run

  govet:
    command:
      - go vet ./...

  goimports:
    command:
      - goimports -v -local github.com/Ensono/taskctl -w -format-only $(ls -d internal/**/*.go)
      - goimports -v -local github.com/Ensono/taskctl -w -format-only $(ls -d pkg/**/*.go)
      - goimports -v -local github.com/Ensono/taskctl -w -format-only $(ls -d cmd/**/*.go)

  goreleaser:
    command:
      - goreleaser --debug --rm-dist

  gofmt:
    command:
      - go fmt -x ./...
      - gofmt -s -w cmd/**/*.go
      - gofmt -s -w internal/**/*.go
      - gofmt -s -w pkg/**/*.go

  generateschema:
    command:
      - go run tools/schemagenerator/main.go
      # todo: error in CI if changes detected 
      # git diff --porcelain
  show_coverage:
    command:
      - go tool cover -html=.coverage/out

  show_docs:
    command:
      - go install golang.org/x/tools/cmd/godoc@latest
      - open http://localhost:6060/pkg/github.com/Ensono/taskctl/?m=all
      - godoc -notes "BUG|TODO" -play -http=:6060
  tidy:
    name: "tidy me up"
    command:
      - go mod tidy
