# yaml-language-server: $schema=https://raw.githubusercontent.com/Ensono/taskctl/master/internal/config/schemas/schema_v1.json

debug: true
output: cockpit
# TODO: top level variables are not being munged int
variables:
  RepoOwner: Ensono
  BinName: taskctl
  LDFLAGS: -ldflags="-s -w -X \"github.com/{{.RepoOwner}})/{{.BinName}})/cmd/taskctl.Version={{.Version}}\" -X \"github.com/{{.RepoOwner}}/{{.BinName}})/cmd/taskctl.Revision={{.Revision}}\" -extldflags -static"

pipelines:
  build:
    - name: Build "darwin"
      task: build
      env:
        GOOS: darwin
        BIN_OUT: bin/taskctl_darwin
    - name: Build "linux"
      task: build
      env:
        GOOS: linux
        BIN_OUT: bin/taskctl_linux
    - name: Build "windows"
      task: build
      env:
        GOOS: windows
        BIN_OUT: bin/taskctl_windows_amd64.exe

  fixcs:
    - task: goimports
      dir: "{{.Root}}"
    - task: gofmt
      dir: "{{.Root}}"
      depends_on: goimports

  prepare:
    - task: tidy
    - task: test
    - task: goimports
      depends_on: test
    - task: gofmt
      depends_on: goimports
    - pipeline: lints

  lints:
    - task: golint
    - task: govet
      depends_on: golint
  
  testOut:
    - task: clean
    - task: test
      depends_on: clean

tasks:
  clean: 
    command: 
      - | 
        rm -rf bin/*
        rm -rf dist/*
        rm -rf vendor/*
      - |
        mkdir -p .coverage
        go install github.com/jstemmer/go-junit-report@v0.9.1 && \
        go install github.com/axw/gocov/gocov@v1.0.0 && \
        go install github.com/AlekSi/gocov-xml@v1.0.0

  test:
    command:
      - mkdir -p .coverage
      - go test ./... -v -mod=readonly -coverprofile=.coverage/out > .coverage/test.out
      - cat .coverage/test.out | go-junit-report > .coverage/report-junit.xml
      - gocov convert .coverage/out | gocov-xml > .coverage/report-cobertura.xml
      # - cat .coverage/test.out

  build:
    command:
      - rm -rf bin/*
      - |
        ldflags="-s -w -X \"github.com/{{.RepoOwner}}/{{.BinName}}/cmd/taskctl.Version={{.Version}}\" -X \"github.com/{{.RepoOwner}}/{{.BinName}}/cmd/taskctl.Revision={{.Revision}}\" -extldflags -static"
        GOOS=windows GOARCH=amd64 CGO_ENABLED=0 go build -mod=readonly -buildvcs=false -ldflags="$ldflags" -o bin/{{.BinName}}-windows-amd64.exe cmd/main.go
        GOOS=windows GOARCH=386 CGO_ENABLED=0 go build -mod=readonly -buildvcs=false -ldflags="$ldflags" -o bin/{{.BinName}}-windows-386.exe cmd/main.go
        GOOS=darwin CGO_ENABLED=0 go build -mod=readonly -buildvcs=false -ldflags="$ldflags" -o bin/{{.BinName}}-darwin cmd/main.go
        GOOS=linux CGO_ENABLED=0 go build -mod=readonly -buildvcs=false -ldflags="$ldflags" -o bin/{{.BinName}}-linux cmd/main.go
    variables:
      RepoOwner: Ensono
      BinName: taskctl

  golint:
  # in CI it is run 
    command:
      - go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
      - golangci-lint run

  govet:
    command:
      - go vet ./...

  goimports:
    command:
      - goimports -v -local github.com/Ensono/taskctl -w -format-only $(ls -d internal/**/*.go)
      - goimports -v -local github.com/Ensono/taskctl -w -format-only $(ls -d pkg/**/*.go)
      - goimports -v -local github.com/Ensono/taskctl -w -format-only $(ls -d cmd/**/*.go)

  goreleaser:
    command:
      - goreleaser --debug --rm-dist

  gofmt:
    command:
      - go fmt -x ./...
      - gofmt -s -w cmd/**/*.go
      - gofmt -s -w internal/**/*.go
      - gofmt -s -w pkg/**/*.go

  generateschema:
    command:
      - go run tools/schemagenerator/main.go
      # todo: error in CI if changes detected 
      # git diff --porcelain
  show_coverage:
    command:
      - go tool cover -html=.coverage/out

  show_docs:
    command:
      - go install golang.org/x/tools/cmd/godoc@latest
      - open http://localhost:6060/pkg/github.com/Ensono/taskctl/?m=all
      - godoc -notes "BUG|TODO" -play -http=:6060
  tidy:
    name: "tidy me up"
    command:
      - go mod tidy
